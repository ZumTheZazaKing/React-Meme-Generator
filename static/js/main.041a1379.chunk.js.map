{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Generation","props","id","onSubmit","generateMeme","value","subreddit","onChange","handleChange","type","placeholder","customSubreddit","handleCustomChange","handleNsfwChange","Meme","memeTitle","subredditText","descriptionText","upvotes","href","originalLink","downloadLink","target","rel","src","alt","ref","imgRef","App","useState","setSubreddit","setCustomSubreddit","nsfwFilter","setNsfwFilter","setMemeTitle","setDescriptionText","setSubredditText","setOriginalLink","setDownloadLink","setUpvotes","useRef","e","preventDefault","apiUrl","console","log","fetch","res","ok","statusText","handleErrors","json","data","nsfw","current","url","title","author","postLink","ups","catch","err","checked","el","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.041a1379.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nfunction Generation(props){\n\n  return <div id=\"generation\">\n    <form onSubmit={props.generateMeme}>\n    <select id=\"select\" value={props.subreddit} onChange={props.handleChange}>\n      <option value=\"\">Random (Default)</option>\n      <option value=\"memes\">memes</option>\n      <option value=\"dankmemes\">dankmemes</option>\n      <option value=\"me_irl\">me_irl</option>\n      <option value=\"bonehurtingjuice\">bonehurtingjuice</option>\n      <option value=\"okbuddyretard\">okbuddyretard</option>\n      <option value=\"shitposting\">shitposting</option>\n      <option value=\"PrequelMemes\">PrequelMemes</option>\n      <option value=\"comedyheaven\">comedyheaven</option>\n    </select>\n    <br/>\n    <p>Or</p>\n    <input type=\"text\" placeholder=\"Custom subreddit\" value={props.customSubreddit} onChange={props.handleCustomChange}/>\n    <br/><br/>\n    <input type=\"checkbox\" onChange={props.handleNsfwChange}/><span>NSFW Filter</span>\n    <br/><br/>\n    <input type=\"submit\" value=\"Generate\"/>\n    </form>\n  </div>\n\n}\n\n\nfunction Meme(props){\n\n  return <div id=\"memeContainer\">\n    <h2>{props.memeTitle}</h2>\n    <p>{props.subredditText}<br/>\n    {props.descriptionText}&nbsp;{props.upvotes}<br/>\n    <a href={props.originalLink}>{props.originalLink}</a><br/></p>\n\n    <a href={props.downloadLink} target=\"_blank\" rel=\"noreferrer\">\n      <img src=\"\" alt=\"Meme be here\" ref={props.imgRef}></img>\n    </a>\n  </div>\n\n}\n\n\nfunction App(){\n\n  let [subreddit, setSubreddit] = useState(\"\");\n  const handleChange = e => setSubreddit(e.target.value);\n  let [customSubreddit, setCustomSubreddit] = useState(\"\");\n  const handleCustomChange = e => setCustomSubreddit(e.target.value);\n  let [nsfwFilter, setNsfwFilter] = useState(false);\n  const handleNsfwChange = e => setNsfwFilter(e.target.checked ? true : false);\n\n  let [memeTitle, setMemeTitle] = useState(\"\");\n\n  let [descriptionText, setDescriptionText] = useState(\"\");\n  let [subredditText, setSubredditText] = useState(\"\");\n  let [originalLink, setOriginalLink] = useState(\"\");\n  let [downloadLink, setDownloadLink] = useState(\"\");\n  let [upvotes, setUpvotes] = useState(\"\");\n\n  let imgRef = useRef();\n\n  function handleErrors(res){\n    if(!res.ok){\n      throw setMemeTitle(res.statusText);\n    }\n    return res;\n  }\n\n  function generateMeme(e){\n    e.preventDefault();\n\n    let apiUrl = \"https://meme-api.herokuapp.com/gimme\";\n\n\n    if(subreddit===\"\" && customSubreddit===\"\"){\n      console.log(\"hello\")\n    } else if (subreddit!==\"\" && customSubreddit===\"\"){\n      apiUrl = apiUrl + `/${subreddit}`;\n    } else if (subreddit===\"\" && customSubreddit!==\"\"){\n      apiUrl = apiUrl + `/${customSubreddit}`;\n    } else if (subreddit!==\"\" && customSubreddit!==\"\"){\n      apiUrl = apiUrl + `/${customSubreddit}`;\n    }\n\n    fetch(apiUrl)\n    .then(res => handleErrors(res))\n    .then(res => res.json())\n    .then(data => {\n      if(nsfwFilter){\n        if(data.nsfw){\n          imgRef.current.src = \"\";\n          imgRef.current.alt = \"Something went wrong\";\n          setMemeTitle(\"The Post is NSFW\");\n          return;\n        }\n      }\n      imgRef.current.src = data.url;\n      setMemeTitle(data.title);\n      setDescriptionText(\"Posted by \" + data.author);\n      setOriginalLink(data.postLink);\n      setSubredditText(`Freshly picked from ${data.subreddit}`);\n      setDownloadLink(data.url);\n      setUpvotes(`| ${data.ups} Upvotes`);\n    \n    }).catch(err => {\n      imgRef.current.src = \"\";\n      imgRef.current.alt = \"Something went wrong\";\n      customSubreddit === \"\" ? setMemeTitle(\"Something went wrong\") : setMemeTitle(\"The Custom Subreddit can't be found\");\n      setDescriptionText(\"\");\n      setOriginalLink(\"\");\n      setSubredditText(\"\");\n      setUpvotes(\"\");\n    });\n\n  }\n\n  return <div id=\"container\">\n\n    <h2>Meme Generator</h2>\n    <p>\n      Generate a meme from the subreddits in the dropdown menu or enter a custom subreddit to generate from!<br>\n      </br>\n      Some posts take time to load. Either wait or generate a new one!\n    </p>\n    \n    <Generation \n    subreddit={subreddit} \n    handleChange={handleChange} \n    generateMeme={generateMeme}\n    customSubreddit={customSubreddit}\n    handleCustomChange={handleCustomChange}\n    handleNsfwChange={handleNsfwChange}\n    />\n    <br/>\n    <Meme imgRef={imgRef} \n    memeTitle={memeTitle} \n    descriptionText={descriptionText}\n    originalLink={originalLink}\n    subredditText={subredditText}\n    downloadLink={downloadLink}\n    upvotes={upvotes}/>\n    \n  </div>\n}\n\n\nconst el = <App/>;\n\nReactDOM.render(el, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}